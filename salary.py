# -*- coding: utf-8 -*-
"""Salary.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nlye7b6SRJvGBALHaO7DrHDGz9yE6LEW
"""

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split, GridSearchCV

df = pd.read_csv('/content/salary_predict_dataset.csv')

df.head(10)

df = df.dropna()

df = df.drop(['experience'], axis=1)

# def string_to_dummy(df, columns):
#     for col in columns:
#         if col in df.columns:
#             dummies = pd.get_dummies(df[col], prefix=col, drop_first=True)
#             df = pd.concat([df, dummies], axis=1)
#             df.drop(col, axis=1, inplace=True)
#     return df

# df = string_to_dummy(df,['Gender'])#,	'EmploymentStatus',	'Gender',	'Location_Code',	'Marital_Status', 'Policy','Policy_Type','Renew_Offer_Type','Response','Sales_Channel','State','Vehicle_Class','Vehicle_Size'])

df.head(10)

def remove_outliers(df, k=3):
    columns = df.columns
    for col in columns:
        mean = np.mean(df[col])
        std = np.std(df[col])
        lower_bound = mean - k * std
        upper_bound = mean + k * std
        df = df[(df[col] > lower_bound) & (df[col] < upper_bound)]
    return df

df = remove_outliers(df)

df.info()

X = df.drop(['Salary'], axis=1)
y = df.Salary

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.05, random_state=101)

# Create the parameter grid
param_grid = {'max_depth': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              'min_samples_leaf': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              'min_samples_split': [2, 3, 4, 5, 6, 7, 8, 9, 10]}

# Create a decision tree regressor
dt = DecisionTreeRegressor()

# Create a GridSearchCV object
grid_search = GridSearchCV(dt, param_grid, cv=10, return_train_score=True)

# Fit to the data
grid_search.fit(X_train, y_train)

# Print the best parameters and the corresponding score
print("Best parameters:", grid_search.best_params_)
print("Best score:", grid_search.best_score_)

d_tree = DecisionTreeRegressor(max_depth=9, min_samples_leaf=2, min_samples_split=3)
d_tree.fit(X_train, y_train)
y_pred = d_tree.predict(X_test)
comp_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
comp_df.head(10)

import pickle
pickle.dump(d_tree, open("salary_predict.pkl", "wb"))

